import { polyfill } from "@astrojs/webapi";
import { builder } from "@netlify/functions";
import { App } from "astro/app";
polyfill(globalThis, {
  exclude: "window document"
});
function parseContentType(header) {
  return (header == null ? void 0 : header.split(";")[0]) ?? "";
}
const clientAddressSymbol = Symbol.for("astro.clientAddress");
const createExports = (manifest, args) => {
  const app = new App(manifest);
  const builders = args.builders ?? false;
  const binaryMediaTypes = args.binaryMediaTypes ?? [];
  const knownBinaryMediaTypes = /* @__PURE__ */ new Set([
    "audio/3gpp",
    "audio/3gpp2",
    "audio/aac",
    "audio/midi",
    "audio/mpeg",
    "audio/ogg",
    "audio/opus",
    "audio/wav",
    "audio/webm",
    "audio/x-midi",
    "image/avif",
    "image/bmp",
    "image/gif",
    "image/vnd.microsoft.icon",
    "image/heif",
    "image/jpeg",
    "image/png",
    "image/svg+xml",
    "image/tiff",
    "image/webp",
    "video/3gpp",
    "video/3gpp2",
    "video/mp2t",
    "video/mp4",
    "video/mpeg",
    "video/ogg",
    "video/x-msvideo",
    "video/webm",
    ...binaryMediaTypes
  ]);
  const myHandler = async (event) => {
    const { httpMethod, headers, rawUrl, body: requestBody, isBase64Encoded } = event;
    const init = {
      method: httpMethod,
      headers: new Headers(headers)
    };
    if (httpMethod !== "GET" && httpMethod !== "HEAD") {
      const encoding = isBase64Encoded ? "base64" : "utf-8";
      init.body = typeof requestBody === "string" ? Buffer.from(requestBody, encoding) : requestBody;
    }
    const request = new Request(rawUrl, init);
    let routeData = app.match(request, { matchNotFound: true });
    if (!routeData) {
      return {
        statusCode: 404,
        body: "Not found"
      };
    }
    const ip = headers["x-nf-client-connection-ip"];
    Reflect.set(request, clientAddressSymbol, ip);
    const response = await app.render(request, routeData);
    const responseHeaders = Object.fromEntries(response.headers.entries());
    const responseContentType = parseContentType(responseHeaders["content-type"]);
    const responseIsBase64Encoded = knownBinaryMediaTypes.has(responseContentType);
    let responseBody;
    if (responseIsBase64Encoded) {
      const ab = await response.arrayBuffer();
      responseBody = Buffer.from(ab).toString("base64");
    } else {
      responseBody = await response.text();
    }
    const fnResponse = {
      statusCode: response.status,
      headers: responseHeaders,
      body: responseBody,
      isBase64Encoded: responseIsBase64Encoded
    };
    const cookies = response.headers.get("set-cookie");
    if (cookies) {
      fnResponse.multiValueHeaders = {
        "set-cookie": Array.isArray(cookies) ? cookies : splitCookiesString(cookies)
      };
    }
    if (app.setCookieHeaders) {
      const setCookieHeaders = Array.from(app.setCookieHeaders(response));
      fnResponse.multiValueHeaders = fnResponse.multiValueHeaders || {};
      if (!fnResponse.multiValueHeaders["set-cookie"]) {
        fnResponse.multiValueHeaders["set-cookie"] = [];
      }
      fnResponse.multiValueHeaders["set-cookie"].push(...setCookieHeaders);
    }
    return fnResponse;
  };
  const handler = builders ? builder(myHandler) : myHandler;
  return { handler };
};
function splitCookiesString(cookiesString) {
  if (Array.isArray(cookiesString)) {
    return cookiesString;
  }
  if (typeof cookiesString !== "string") {
    return [];
  }
  let cookiesStrings = [];
  let pos = 0;
  let start;
  let ch;
  let lastComma;
  let nextStart;
  let cookiesSeparatorFound;
  function skipWhitespace() {
    while (pos < cookiesString.length && /\s/.test(cookiesString.charAt(pos))) {
      pos += 1;
    }
    return pos < cookiesString.length;
  }
  function notSpecialChar() {
    ch = cookiesString.charAt(pos);
    return ch !== "=" && ch !== ";" && ch !== ",";
  }
  while (pos < cookiesString.length) {
    start = pos;
    cookiesSeparatorFound = false;
    while (skipWhitespace()) {
      ch = cookiesString.charAt(pos);
      if (ch === ",") {
        lastComma = pos;
        pos += 1;
        skipWhitespace();
        nextStart = pos;
        while (pos < cookiesString.length && notSpecialChar()) {
          pos += 1;
        }
        if (pos < cookiesString.length && cookiesString.charAt(pos) === "=") {
          cookiesSeparatorFound = true;
          pos = nextStart;
          cookiesStrings.push(cookiesString.substring(start, lastComma));
          start = pos;
        } else {
          pos = lastComma + 1;
        }
      } else {
        pos += 1;
      }
    }
    if (!cookiesSeparatorFound || pos >= cookiesString.length) {
      cookiesStrings.push(cookiesString.substring(start, cookiesString.length));
    }
  }
  return cookiesStrings;
}
export {
  createExports
};
