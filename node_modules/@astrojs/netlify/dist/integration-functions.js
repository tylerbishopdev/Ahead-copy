import { createRedirects } from "./shared.js";
function getAdapter(args = {}) {
  return {
    name: "@astrojs/netlify/functions",
    serverEntrypoint: "@astrojs/netlify/netlify-functions.js",
    exports: ["handler"],
    args
  };
}
function netlifyFunctions({
  dist,
  builders,
  binaryMediaTypes
} = {}) {
  let _config;
  let entryFile;
  return {
    name: "@astrojs/netlify",
    hooks: {
      "astro:config:setup": ({ config, updateConfig }) => {
        const outDir = dist ?? new URL("./dist/", config.root);
        updateConfig({
          outDir,
          build: {
            client: outDir,
            server: new URL("./.netlify/functions-internal/", config.root)
          }
        });
      },
      "astro:config:done": ({ config, setAdapter }) => {
        setAdapter(getAdapter({ binaryMediaTypes, builders }));
        _config = config;
        entryFile = config.build.serverEntry.replace(/\.m?js/, "");
        if (config.output === "static") {
          console.warn(
            `[@astrojs/netlify] \`output: "server"\` or \`output: "hybrid"\` is required to use this adapter.`
          );
          console.warn(
            `[@astrojs/netlify] Otherwise, this adapter is not required to deploy a static site to Netlify.`
          );
        }
      },
      "astro:build:done": async ({ routes, dir }) => {
        const type = builders ? "builders" : "functions";
        await createRedirects(_config, routes, dir, entryFile, type);
      }
    }
  };
}
export {
  netlifyFunctions as default,
  getAdapter,
  netlifyFunctions
};
